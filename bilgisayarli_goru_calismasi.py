# -*- coding: utf-8 -*-
"""Bilgisayarli_Goru_Calismasi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11IsFF4K3XtF6EjeVnj8V1JWHk1-EtQna
"""

!pip install -q keras

import tensorflow as tf
import keras

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential, save_model
from keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense
import numpy as np

train_data_gen=ImageDataGenerator(rescale=1/255.,rotation_range=40, shear_range=0.2,
                                  zoom_range=0.2, horizontal_flip=True, fill_mode="nearest")

val_data_gen=ImageDataGenerator(rescale=1/255.)

train_data=train_data_gen.flow_from_directory(directory="/content/drive/MyDrive/animal_detection/data/train", 
                                              target_size=(224,224), color_mode="grayscale",
                                              class_mode="categorical", batch_size=32)
val_data=val_data_gen.flow_from_directory(directory="/content/drive/MyDrive/animal_detection/data/validation",
                                          target_size=(224,224), color_mode="grayscale",
                                          class_mode="categorical", batch_size=32)

model=Sequential()

model.add(Conv2D(32,(3,3), input_shape=(224,224,1), activation="swish"))

model.add(Conv2D(64,(3,3), activation="swish"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))

model.add(Conv2D(128,(3,3), activation="swish"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))

model.add(Conv2D(128,(3,3), activation="swish"))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))

model.add(Flatten())

model.add(Dense(256, activation="swish"))
model.add(Dropout(0.5))
model.add(Dense(3, activation="softmax"))

model.summary()

model.compile(optimizer="rmsprop", loss="categorical_crossentropy", metrics=["accuracy"])
hist_sigmoid=model.fit(train_data,batch_size=32,epochs=6,validation_data=val_data,steps_per_epoch=14630//32, validation_steps=1500//32)

model.compile(optimizer="rmsprop", loss="categorical_crossentropy", metrics=["accuracy"])
hist_tanh=model.fit(train_data,batch_size=32,epochs=6,validation_data=val_data,steps_per_epoch=14630//32, validation_steps=1500//32)

model.compile(optimizer="rmsprop", loss="categorical_crossentropy", metrics=["accuracy"])
hist_relu=model.fit(train_data,batch_size=32,epochs=6,validation_data=val_data,steps_per_epoch=14630//32, validation_steps=1500//32)

model.compile(optimizer="rmsprop", loss="categorical_crossentropy", metrics=["accuracy"])
hist_linear=model.fit(train_data,batch_size=32,epochs=6,validation_data=val_data,steps_per_epoch=14630//32, validation_steps=1500//32)

model.compile(optimizer="rmsprop", loss="categorical_crossentropy", metrics=["accuracy"])
hist_swish=model.fit(train_data,batch_size=32,epochs=6,validation_data=val_data,steps_per_epoch=14630//32, validation_steps=1500//32)